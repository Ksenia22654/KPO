#pragma once
#include <iostream>

using namespace std;

// 1. RELATION описывает возможные переходы между вершинами автомата.
// 2. NODE описывает вершину, котора€ может иметь несколько исход€щих переходов(рЄбер).
// 3. FST описывает весь автомат, состо€щий из вершин, переходов и обрабатываемой строки.
// 4. execute выполн€ет автомат, провер€€, проходит ли строка через конечный автомат согласно его переходам.

namespace FST
{
    struct RELATION // ребро: символ -> вершина графа перехода  ј
    {
        char symbol; // символ перехода
        short nnode; // номер вершины, в которую будет осуществлен переход при получении этого символа.

        //  онструктор позвол€ет создать объект RELATION,
        // задава€ начальные значени€ дл€ символа и состо€ни€.
        RELATION(
            char c = 0x00, // символ перехода 
            short ns = 0   // новое состо€ние
        );
    };

    struct NODE // ¬ершина
    {
        short n_relation; // количество возможных переходов из этой вершины (то есть количество рЄбер).
        RELATION* relations; // массив ребер (объектов RELATION), содержащий все возможные переходы из данной вершины.

        //  онструкторы позвол€ют создавать 
        // объекты NODE с заданным количеством переходов и рЄбрами.
        NODE();
        NODE(short n, RELATION rel, ...);
    };

    struct FST // Ќедетерминированный конечный автомат
    {
        const char* string; // строка, которую нужно проверить с помощью автомата.
        short position; // текуща€ позици€ в строке (указывает на символ, который обрабатываетс€).
        short nstates; // количество состо€ний в автомате (вершин).
        NODE* nodes; // массив состо€ний (объектов NODE).
        short* rstates; // массив текущих активных состо€ний.

        // создает автомат, задава€ строку, количество состо€ний и набор вершин.
        FST(const char* s, short ns, NODE n, ...);
    };

    bool execute(FST& fst);
}
